                   I.C.O TOKEN SALE PROGRESS TREE
                 Version 1.0, CODE_NAME: denial_token

ERC-20 TOKEN CONTRACT WORK FLOW
================================
* Project folder created
* 'truffle init' command run
* started ganache local block chain
* Inform truffle to use the ganache blockchain 
* Coded minimum contract
* created new migration file to deploy contract
* contract deployed
* using truffle console intracted with contract
* written tests for contract 
* written transfer function and tested
* Complete ERC-20 token and tested

CROWD SALE CONTRACT WORK FLOW
==============================
           - allocate tokens to tokensale contract
           - set token price in WEI
           - assign an admin
           - buy tokens
           - end sale

* Contract file and test file generated
* updated the migration
* admin assigned
* setup token contract and token price as well as tested
* TokenContract inported to Crowdsale contract
* External library added for sake math
* buyToken function setup done
* setting up endSale function
* two require and selfdestruct for endSale done


FRONT END
=========
* installed lite-server package
* modified package.json to add lite-server to scripts
* added bs-config.json file for lite-server
* created index.html files
* Required Dependencies:
    - Bootstrap          ( included using CDN )
    - Web3.js            ( used to intract with blockchain node )
    - truffle-contract   ( used to intract with created contract )
    -app.js              ( manual js file )

* Done with html
* Coding custom js file to act as a bridge bw backend and frontend
  # https://github.com/ethereum/web3.js/tree/de3d64a4a9caa667642784f1aced78d5a89bb325
  # https://github.com/ethereum/wiki/wiki/JavaScript-API#getting-started
  # https://ethereum.stackexchange.com/questions/38667/where-is-the-code-for-web3-version-0-20-x
* custom Js file successfully communicating with blockchain, tested by retreving contract addresses

